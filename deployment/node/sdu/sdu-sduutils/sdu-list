#!/bin/bash
    . shlib-import cliboot

    RCSID='$Id: bash.sh 1731 2010-09-19 20:34:56Z lenik $'
    short_opts="i:x:l:f:sdg:hqv"
    long_opts="include,exclude,layout,format,svg,display,program,help,quiet,verbose,version"

    format=
    layout=fdp
    display=
    includes=()
    excludes=()

    color_1=green
    color_2=blue
    color_3=red
    color_4=orange

function version() {
    parse_id "$RCSID"
    echo "[$BASENAME] List SDU Packages"
    echo "Written by Lenik, Version 0.$rcs_rev, Last updated at $rcs_date"
}

function help() {
    version
    echo
    echo "Syntax: "
    echo "    $0 [OPTION] [--] ..."
    echo
    echo "Options: "
    echo "    -i, --include=PREFIX    select only specific packages"
    echo "    -x, --exclude=NAME      exclude specific packages"
    echo "    -l, --layout=LAYOUT     specify the layout method"
    echo "    -f, --format=FORMAT     output format"
    echo "    -s, --svg               output SVG graphics"
    echo "    -d, --display           open the graphics with ImageMagick"
    echo "    -g, --program=NAME      open with specific viewer"
    echo "    -q, --quiet             repeat to get less info"
    echo "    -v, --verbose           repeat to get more info"
    echo "    -h, --help              show this help page"
    echo "        --version           print the version info"
}

function setopt() {
    case "$1" in
        -i|--include)
            includes[${#includes[@]}]="$2-";;
        -x|--exclude)
            excludes[${#excludes[@]}]="$2";;
        -l|--layout)
            layout=$2;;
        -f|--format)
            format=$2;;
        -s|--svg)
            format=svg;;
        -d|--display)
            display=display;;
        -g|--program)
            display="$2";;
        -h|--help)
            help; exit;;
        -q|--quiet)
            LOGLEVEL=$((LOGLEVEL - 1));;
        -v|--verbose)
            LOGLEVEL=$((LOGLEVEL + 1));;
        --version)
            version; exit;;
        *)
            quit "invalid option: $1";;
    esac
}

function main() {
    if [ ${#includes[@]} = 0 ]; then
        includes=(sdu-)
    fi

    if [ -z "$format" ]; then
        for inc in "${includes[@]}"; do
            aptitude search "^$inc"
        done
    else
        pkgs=
        for inc in "${includes[@]}"; do
            list0=`apt-cache pkgnames $inc`
            list=
            for n in $list0; do
                excl=
                for x in "${excludes[@]}"; do
                    if [ "$n" = "$x" ]; then
                        excl=1
                        break
                    fi
                done
                if [ -z "$excl" ]; then
                    list="$list $n"
                fi
            done
            pkgs="$pkgs $list"
        done
        tmp=`tempfile`
        apt-cache -o APT::Cache::GivenOnly=1 dotty $pkgs >$tmp

        index=0
        for inc in "${includes[@]}"; do
            style_color="color_$((++index))"

            boxfx $inc style=bold color=${!style_color} <$tmp >$tmp.1
            mv -f $tmp.1 $tmp
        done

        $layout -T$format <$tmp >$tmp.1
        mv -f $tmp.1 $tmp

        if [ -n "$display" ]; then
            $display $tmp
        else
            cat $tmp
        fi
        rm -f $tmp
    fi
}

boot "$@"
