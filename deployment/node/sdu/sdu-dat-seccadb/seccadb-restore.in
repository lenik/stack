#!/bin/bash
    . shlib-import cliboot

    RCSID='$Id: - @VERSION@ @DATE@ @TIME@ - $'
    short_opts="hqv"
    long_opts="help,quiet,verbose,version"

    DROPDB=seccadb-dropdb
    CREATEDB=seccadb-createdb
    PSQL=seccadb-psql

function version() {
    parse_id "$RCSID"
    echo "[$BASENAME] Restore backed up secca database"
    echo "Written by Lenik, Version $rcs_rev, Last updated at $rcs_date"
}

function help() {
    version
    echo
    echo "Syntax: "
    echo "    $0 [OPTION] [--] bak-files"
    echo
    echo "Options: "
    echo "    -q, --quiet             Repeat to get less info"
    echo "    -v, --verbose           Repeat to get more info"
    echo "    -h, --help              Show this help page"
    echo "        --version           Print the version info"
}

function setopt() {
    case "$1" in
        -h|--help)
            help; exit;;
        -q|--quiet)
            LOGLEVEL=$((LOGLEVEL - 1));;
        -v|--verbose)
            LOGLEVEL=$((LOGLEVEL + 1));;
        --version)
            version; exit;;
        *)
            quit "invalid option: $1";;
    esac
}

function main() {
    for f in "$@"; do
        if [ ! -r "$f" ]; then
            _error "Not readable: $f"
            continue
        fi
        restore "$f"
    done
}

function restore() {
    local bak="$1"

    BACKUP_VERSION=0
    BACKUP_DATE=
    DATNAME=
    DATDBA=
    CLUSTER=

    _log2 "Parse backed up file $bak"
    while read prefix cmdline; do
        if [ "$prefix" = '--!' ]; then
            eval "$cmdline"
            continue
        fi
        if [ -z "$prefix" ]; then
            break
        fi
    done <"$bak"

    if [ -z "$DATNAME" ]; then
        _error "DATNAME isn't defined in backup file $bak"
        return 1
    fi
    if [ -z "$DATDBA" ]; then
        _error "DATDBA isn't defined in backup file $bak"
        return 1
    fi

    _log2 "Last backed up at $BACKUP_DATE (version=$BACKUP_VERSION)"
    _log1 "Restore database $DATNAME (from $CLUSTER) owned by $DATDBA"

    _log2 "Dropping existing database if any: $DATNAME"
    if ! $DROPDB "$DATNAME"; then
        _error "Failed to drop database $DATNAME"
        return 2
    fi

    _log2 "Re-creating database $DATNAME with owner $DATDBA"
    $CREATEDB --owner "$DATDBA" "$DATNAME"

    _log2 "Execute backed up DDL"
    $PSQL -d "$DATNAME" -f "$bak"
}

boot "$@"
