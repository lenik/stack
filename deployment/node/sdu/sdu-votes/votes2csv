#!/usr/bin/perl

=head1 NAME

votes2csv - Collect vote.in files and generate the result CSV

=cut
use strict;
use vars qw($LOGNAME $LOGLEVEL);
use cmt::log(2);
    $LOGNAME    = 'votes2csv'; # $0 =~ /([^\/\\.]+)(?:\.\w+)*$/;
use cmt::path('path_split', 'path_splitext');
use cmt::vcs('parse_id');
    my %RCSID   = parse_id('$Id: perl.pl 2141 2010-12-13 06:15:26Z lenik $');
use Getopt::Long;
    Getopt::Long::Configure('gnu_getopt');


sub _main; sub _version; sub _help;

sub _boot {
    GetOptions('q|quiet'        => sub { $LOGLEVEL-- },
               'v|verbose'      => sub { $LOGLEVEL++ },
               'version'        => sub { _version; exit 0 },
               'h|help'         => sub { _help; exit 0 },
               )
        or exit(1);
    _main;
}

=head1 SYNOPSIS

B<votes2csv>
    S<[ B<-q> | B<--quiet> ]>
    S<[ B<-v> | B<--verbose> ]>
    S<[ B<-h> | B<--help> ]>
    S<[ B<--version> ]>
    S<[ B<--> ]>
    S<[ I<...the rest of arguments...> ]>

=head1 DESCRIPTION

B<votes2csv> is a WHAT used for WHAT. It HOW-WORKS.

BACKGROUND-PROBLEM.

HOW-votes2csv-RESOLVES.

=head1 OPTIONS

=over 8

=item B<-m> | B<--my-option>

...

=item B<-q> | B<--quiet>

Repeat this option to suppress unimportant information to display.

=item B<-v> | B<--verbose>

Repeat this option to display more detailed information.

=item B<-h> | B<--help>

Display a breif help page and exit(0).

=item B<--version>

Display a short version information and exit(0).

=back

=head1 EXAMPLES

=over 4

=item Show help

    votes2csv --help

=back

=head1 ENVIRONMENT

=over 8

=item TEMP, TMP

TEMP(or TMP, if $TEMP directory isn't existed) directory used to create
temporary files.

=back

=cut
sub _help {
    &_version;
    print "\nSyntax: \n    $0 [OPTION] [--] ...\n", <<'EOM';

Common options:
    -q, --quiet             Repeat to get less info
    -v, --verbose           Repeat to get more info
    -h, --help              Show this help page
        --version           Print the version info
EOM
}

exit (_boot or 0);

sub _main {

    my $table = {};
    my @fields = qw(ID);

    for my $file (@ARGV) {
        my ($dir, $base) = path_split($file);
        my ($field, $ext) = path_splitext($base);

        push @fields, $field;

        open(F, "<$file") or die "Can't open file $file";
        while (<F>) {
            chomp;
            s/^\s+//;
            next if $_ eq '';
            next if substr($_, 0, 1) eq '#';

            my ($id, $val) = /^(.+?) \s* [=:] \s* (.*?) \s*$/x;
            die "Bad line in $file: $_" if ($id eq '');

            $table->{$id}->{ID} = $id;
            $table->{$id}->{$field} = $val;
        }
        close F;
    }

    # Header
    print join(':', @fields)."\n";

    for my $id (sort keys %$table) {
        my $row = $table->{$id};
        my $line = '';
        for my $field (@fields) {
            $line .= $row->{$field}.':';
        }
        chop $line;
        print $line."\n";
    }
}

=head1 DIAGNOSTICS

(No Information)

=cut
# (HELPER FUNCTIONS)

=head1 HACKING

(No Information)

=cut
# (MODULE FUNCTIONS)

=head1 HISTORY

=over

=item 0.x

The initial version.

=back

=cut
sub _version {
    print "[$LOGNAME] Collect vote.in files and generate the result CSV \n";
    print "Written by Lenik,  Version 0.$RCSID{rev},  Last updated at $RCSID{date}\n";
}

=head1 SEE ALSO

The L<cmt/"Perl_simple_cli_program_template">

=head1 AUTHOR

Lenik (谢继雷) <>

=cut
